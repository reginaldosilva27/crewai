import requests
from tokens import get_claude_api_key
from crewai_tools import tool

class ClaudeAPIClient:
    def __init__(self, api_key, base_url="https://api.anthropic.com/v1"):
        self.api_key = api_key
        self.base_url = base_url
        self.headers = {
            "x-api-key": self.api_key,
            "Content-Type": "application/json",
            "anthropic-version": "2023-06-01",  # Adicionando o cabeÃ§alho anthropic-version
            "anthropic-beta": "max-tokens-3-5-sonnet-2024-07-15"
        }

    def call_claude(self, prompt):
        endpoint = f"{self.base_url}/messages"
        payload = {
            "model": "claude-3-5-sonnet-20240620",  # Usando o modelo Opus
            "max_tokens": 8000,
            "temperature": 0.7,
            "system": "You are Databricks Specialista with a background in documentation and Markdown",
            "messages": [
                {
                    "role": "user",
                    "content": f"\n\nHuman: {prompt}\n\nAssistant:"
                }
            ]
        }
        response = requests.post(endpoint, json=payload, headers=self.headers)
        
        try:
            response_json = response.json()
        except ValueError:
            return f"Error: Unable to parse JSON response: {response.text}"
        
        if response.status_code == 200:
            if "completion" in response_json:
                return response_json["content"]
            elif "content" in response_json:
                return response_json["content"][0]["text"]
            else:
                return "Error: 'completion' or 'choices' not found in response"
        else:
            return f"Error: {response_json.get('error', 'Unknown error')}"

@tool
def call_claude_api(prompt: str) -> str:
    """
    Calls the Claude API with the provided prompt and returns the generated response.
    
    Args:
    prompt (str): The prompt to send to the Claude API.
    
    Returns:
    str: The response generated by the Claude API.
    """
    client = ClaudeAPIClient(api_key=get_claude_api_key())
    return client.call_claude(prompt)
